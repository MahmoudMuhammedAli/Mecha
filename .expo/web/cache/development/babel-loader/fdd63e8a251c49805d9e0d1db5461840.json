{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\ALL LANGs\\\\projects\\\\PokeGameFront\\\\screens\\\\ChooseCard.tsx\",\n    _templateObject,\n    _templateObject2;\n\nimport React, { useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Card from \"../components/Card\";\nimport tw from \"tailwind-react-native-classnames\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { choose1, CreateGame } from \"../redux/Game\";\nexport default function Game(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chosenCards = _useState2[0],\n      setChosenCards = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.cards;\n  }),\n      allCards = _useSelector.allCards;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      cardSet = _useSelector2.cardSet;\n\n  var _useState3 = useState(cardSet),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cardsLeft = _useState4[0],\n      setCardsLeft = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  var handleChoice = function handleChoice(card, id) {\n    var newCard = allCards[id - 1];\n    setCardsLeft(cardsLeft.filter(function (item) {\n      return item.id !== card.id;\n    }));\n    chosenCards.length < 6 && setChosenCards([].concat(_toConsumableArray(chosenCards), [newCard]));\n  };\n\n  useEffect(function () {\n    if (chosenCards.length >= 6) {\n      dispatch(choose1(chosenCards));\n      dispatch(CreateGame());\n      navigation.navigate(\"Game\");\n    }\n  }, [chosenCards]);\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: [tw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"text-2xl  font-bold text-center mt-10\"]))), styles.title],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Choose Your Deck\"), React.createElement(Text, {\n    style: [tw(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"  text-gray-200  text-center mb-10 \"])))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, chosenCards.length, \" out of 6\"), React.createElement(FlatList, {\n    style: {\n      marginBottom: 150\n    },\n    numColumns: 2,\n    keyExtractor: function keyExtractor(card) {\n      return card.id;\n    },\n    data: cardsLeft,\n    renderItem: function renderItem(card) {\n      return React.createElement(TouchableOpacity, {\n        style: [styles.holder],\n        onPress: function onPress() {\n          return handleChoice(card.item, parseInt(card.item.id));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }, React.createElement(Card, {\n        flipped: true,\n        width: \"100%\",\n        height: \"100%\",\n        id: parseInt(card.item.id),\n        type: card.item.type,\n        HP: card.item.hp,\n        cardName: card.item.cardname,\n        attack: card.item.attack,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#ce1326\",\n    minHeight: \"100%\"\n  },\n  title: {\n    fontSize: 30,\n    fontFamily: \"space-mono\",\n    color: \"#fcd116\"\n  },\n  holder: {\n    width: 170,\n    height: 240,\n    margin: 10\n  },\n  scroll: {\n    display: \"flex\",\n    flexDirection: \"row\"\n  }\n});","map":{"version":3,"sources":["D:/ALL LANGs/projects/PokeGameFront/screens/ChooseCard.tsx"],"names":["React","useEffect","useState","Card","tw","SafeAreaView","TouchableOpacity","useDispatch","useSelector","choose1","CreateGame","Game","navigation","chosenCards","setChosenCards","state","cards","allCards","user","cardSet","cardsLeft","setCardsLeft","dispatch","handleChoice","card","id","newCard","filter","item","length","navigate","styles","container","title","marginBottom","holder","parseInt","type","hp","cardname","attack","StyleSheet","create","backgroundColor","minHeight","fontSize","fontFamily","color","width","height","margin","scroll","display","flexDirection"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nimport {\r\n  View,\r\n  Text,\r\n  Image,\r\n  StyleSheet,\r\n  FlatList,\r\n  ListRenderItemInfo,\r\n} from \"react-native\";\r\nimport { RootTabScreenProps } from \"../types\";\r\nimport Card from \"../components/Card\";\r\nimport tw from \"tailwind-react-native-classnames\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport { ScrollView, TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport Loading from \"./Loading\";\r\nimport { CardsProps } from \"../api/cards\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { choose1, CreateGame } from \"../redux/Game\";\r\n\r\nexport default function Game({ navigation }: RootTabScreenProps<\"Choose\">) {\r\n  const [ chosenCards, setChosenCards ] = useState<CardsProps[]>([]);\r\n  const { allCards } = useSelector((state: RootState) => state.cards);\r\n  const { cardSet } = useSelector((state: RootState) => state.user);\r\n  const [ cardsLeft, setCardsLeft ] = useState(cardSet);\r\n\r\n  const dispatch = useDispatch();\r\n  const handleChoice = (card: CardsProps, id: number) => {\r\n    let newCard = allCards[id - 1];\r\n    setCardsLeft(cardsLeft.filter((item) => item.id !== card.id));\r\n\r\n    chosenCards.length < 6 && setChosenCards([ ...chosenCards, newCard ]);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (chosenCards.length >= 6) {\r\n        dispatch(choose1(chosenCards));\r\n        dispatch(CreateGame());\r\n        navigation.navigate(\"Game\");\r\n      }\r\n    },\r\n    [ chosenCards ]\r\n  );\r\n  //! if (loading) return <Loading />;\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <Text style={[ tw`text-2xl  font-bold text-center mt-10`, styles.title ]}>\r\n        Choose Your Deck\r\n      </Text>\r\n      <Text style={[ tw`  text-gray-200  text-center mb-10 ` ]}>\r\n        {chosenCards.length} out of 6\r\n      </Text>\r\n\r\n      <FlatList\r\n        style={{ marginBottom: 150 }}\r\n        numColumns={2}\r\n        keyExtractor={(card) => card.id}\r\n        data={cardsLeft}\r\n        renderItem={(card) => (\r\n          <TouchableOpacity\r\n            style={[ styles.holder ]}\r\n            onPress={() => handleChoice(card.item, parseInt(card.item.id))}\r\n          >\r\n            <Card\r\n              flipped\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              id={parseInt(card.item.id)}\r\n              type={card.item.type}\r\n              HP={card.item.hp}\r\n              cardName={card.item.cardname}\r\n              attack={card.item.attack}\r\n            />\r\n          </TouchableOpacity>\r\n        )}\r\n      />\r\n    </SafeAreaView>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: \"#ce1326\",\r\n    minHeight: \"100%\",\r\n  },\r\n  title: {\r\n    fontSize: 30,\r\n    fontFamily: \"space-mono\",\r\n    color: \"#fcd116\",\r\n  },\r\n\r\n  holder: {\r\n    width: 170,\r\n    height: 240,\r\n    margin: 10,\r\n  },\r\n  scroll: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n});\r\n\r\n// // Todo make an abstract card component with id, pic_url, flipped\r\n// // todo for performance, once you have the data for the cards render them out in a flatlist component.\r\n// // todo send down a sub array with the chosen cards to the game and render them their again once more using the ids you have\r\n//todo center the items horizontally in the flatlist component.\r\n"]},"metadata":{},"sourceType":"module"}