{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\ALL LANGs\\\\projects\\\\PokeGameFront\\\\components\\\\Deck.tsx\",\n    _templateObject;\n\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport tw from \"tailwind-react-native-classnames\";\nimport { pick1 } from \"../redux/Game\";\nimport Card from \"./Card\";\n\nvar Deck = function Deck(Props) {\n  var opponent = Props.opponent;\n\n  var _useSelector = useSelector(function (state) {\n    return state.game;\n  }),\n      player1 = _useSelector.player1;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.game;\n  }),\n      turn = _useSelector2.turn;\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.game;\n  }),\n      player2 = _useSelector3.player2;\n\n  var _useSelector4 = useSelector(function (state) {\n    return state.game;\n  }),\n      placeholder = _useSelector4.placeholder;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(player1.chosen),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeChosen = _useState2[0],\n      setActiveChosen = _useState2[1];\n\n  var handleChoice = function handleChoice(card, index) {\n    if (!opponent && turn === 1 && (player1.playCard === placeholder || player1.playCard.HP === 0)) {\n      dispatch(pick1(card));\n      setActiveChosen(activeChosen.filter(function (item) {\n        return item.id !== card.id;\n      }));\n    }\n  };\n\n  var whatToRender = function whatToRender() {\n    if (opponent) return player2.chosen;else return activeChosen;\n  };\n\n  return React.createElement(View, {\n    style: tw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"flex flex-row \"]))),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, whatToRender().map(function (card, index) {\n    return React.createElement(TouchableOpacity, {\n      key: parseInt(card.id),\n      style: [{\n        transform: [{\n          translateX: index * -50\n        }],\n        zIndex: 6 - index\n      }],\n      onPress: function onPress() {\n        return handleChoice(card, index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, React.createElement(Card, {\n      flipped: !opponent,\n      width: 100,\n      height: 136,\n      id: parseInt(card.id),\n      type: card.type,\n      HP: card.HP,\n      cardName: card.cardName,\n      attack: card.attack,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\"\n  },\n  holder: {\n    width: 150,\n    height: 180\n  }\n});\nexport default Deck;","map":{"version":3,"sources":["D:/ALL LANGs/projects/PokeGameFront/components/Deck.tsx"],"names":["React","useState","useDispatch","useSelector","tw","pick1","Card","Deck","Props","opponent","state","game","player1","turn","player2","placeholder","dispatch","chosen","activeChosen","setActiveChosen","handleChoice","card","index","playCard","HP","filter","item","id","whatToRender","map","parseInt","transform","translateX","zIndex","type","cardName","attack","styles","StyleSheet","create","container","display","flexDirection","holder","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  Image,\r\n  StyleSheet,\r\n  ListRenderItemInfo,\r\n  FlatList,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport tw from \"tailwind-react-native-classnames\";\r\nimport Cards, { CardsProps } from \"../api/cards\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { changeTurn, pick1 } from \"../redux/Game\";\r\nimport Card from \"./Card\";\r\ninterface Props {\r\n  opponent?: boolean;\r\n}\r\nconst Deck: React.FC<Props> = (Props) => {\r\n  const { opponent } = Props;\r\n\r\n  //TODO: placeHolder. GET FROM THE STOR!!!\r\n  const { player1 } = useSelector((state: RootState) => state.game);\r\n  const { turn } = useSelector((state: RootState) => state.game);\r\n  const { player2 } = useSelector((state: RootState) => state.game);\r\n  const { placeholder } = useSelector((state: RootState) => state.game);\r\n  const dispatch = useDispatch();\r\n\r\n  const [ activeChosen, setActiveChosen ] = useState(player1.chosen);\r\n\r\n  const handleChoice = (card: CardsProps, index: number) => {\r\n    //TODO: when you get the players from the db change turn ===1 to turn ===player.id\r\n    if (\r\n      !opponent &&\r\n      turn === 1 &&\r\n      (player1.playCard === placeholder || player1.playCard.HP === 0)\r\n    ) {\r\n      dispatch(pick1(card));\r\n      setActiveChosen(\r\n        activeChosen.filter((item: CardsProps) => item.id !== card.id)\r\n      );\r\n      //todo dispatch(changeTurn());\r\n    }\r\n  };\r\n  const whatToRender = () => {\r\n    if (opponent) return player2.chosen;\r\n    else return activeChosen;\r\n  };\r\n  return (\r\n    <View style={tw`flex flex-row `}>\r\n      {whatToRender().map((card, index) => (\r\n        <TouchableOpacity\r\n          key={parseInt(card.id)}\r\n          style={[\r\n            { transform: [ { translateX: index * -50 } ], zIndex: 6 - index },\r\n          ]}\r\n          onPress={() => handleChoice(card, index)}\r\n        >\r\n          <Card\r\n            flipped={!opponent}\r\n            width={100}\r\n            height={136}\r\n            id={parseInt(card.id)}\r\n            type={card.type}\r\n            HP={card.HP}\r\n            cardName={card.cardName}\r\n            attack={card.attack}\r\n          />\r\n        </TouchableOpacity>\r\n      ))}\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  holder: {\r\n    width: 150,\r\n    height: 180,\r\n  },\r\n});\r\nexport default Deck;\r\n"]},"metadata":{},"sourceType":"module"}