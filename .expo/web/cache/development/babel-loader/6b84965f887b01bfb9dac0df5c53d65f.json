{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport { PermissionStatus } from 'expo-modules-core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoBarCodeScannerModule from \"./ExpoBarCodeScannerModule\";\nimport ExpoBarCodeScannerView from \"./ExpoBarCodeScannerView\";\nvar BarCodeType = ExpoBarCodeScannerModule.BarCodeType,\n    Type = ExpoBarCodeScannerModule.Type;\nvar EVENT_THROTTLE_MS = 500;\nexport { PermissionStatus };\nexport var BarCodeScanner = function (_React$Component) {\n  _inherits(BarCodeScanner, _React$Component);\n\n  var _super = _createSuper(BarCodeScanner);\n\n  function BarCodeScanner() {\n    var _this;\n\n    _classCallCheck(this, BarCodeScanner);\n\n    _this = _super.apply(this, arguments);\n    _this.lastEvents = {};\n    _this.lastEventsTimes = {};\n\n    _this.onObjectDetected = function (callback) {\n      return function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n        var type = nativeEvent.type;\n\n        if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && Date.now() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n          return;\n        }\n\n        if (callback) {\n          callback(nativeEvent);\n          _this.lastEventsTimes[type] = new Date();\n          _this.lastEvents[type] = JSON.stringify(nativeEvent);\n        }\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(BarCodeScanner, [{\n    key: \"render\",\n    value: function render() {\n      var nativeProps = this.convertNativeProps(this.props);\n      var onBarCodeScanned = this.props.onBarCodeScanned;\n      return React.createElement(ExpoBarCodeScannerView, Object.assign({}, nativeProps, {\n        onBarCodeScanned: this.onObjectDetected(onBarCodeScanned)\n      }));\n    }\n  }, {\n    key: \"convertNativeProps\",\n    value: function convertNativeProps(props) {\n      var nativeProps = {};\n\n      for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {\n        var _ref2 = _Object$entries[_i];\n\n        var _ref3 = _slicedToArray(_ref2, 2);\n\n        var key = _ref3[0];\n        var value = _ref3[1];\n\n        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n          nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n        } else {\n          nativeProps[key] = value;\n        }\n      }\n\n      return nativeProps;\n    }\n  }], [{\n    key: \"getPermissionsAsync\",\n    value: function getPermissionsAsync() {\n      return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", ExpoBarCodeScannerModule.getPermissionsAsync());\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"requestPermissionsAsync\",\n    value: function requestPermissionsAsync() {\n      return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", ExpoBarCodeScannerModule.requestPermissionsAsync());\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"scanFromURLAsync\",\n    value: function scanFromURLAsync(url) {\n      var barCodeTypes,\n          _args3 = arguments;\n      return _regeneratorRuntime.async(function scanFromURLAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              barCodeTypes = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : Object.values(BarCodeType);\n\n              if (ExpoBarCodeScannerModule.scanFromURLAsync) {\n                _context3.next = 3;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n\n            case 3:\n              if (!(Array.isArray(barCodeTypes) && !barCodeTypes.length)) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n\n            case 5:\n              if (!(Platform.OS === 'ios')) {\n                _context3.next = 11;\n                break;\n              }\n\n              if (!(Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr))) {\n                _context3.next = 8;\n                break;\n              }\n\n              throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n\n            case 8:\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]));\n\n            case 10:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 11:\n              _context3.next = 13;\n              return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes));\n\n            case 13:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return BarCodeScanner;\n}(React.Component);\nBarCodeScanner.Constants = {\n  BarCodeType: BarCodeType,\n  Type: Type\n};\nBarCodeScanner.ConversionTables = {\n  type: Type\n};\nBarCodeScanner.defaultProps = {\n  type: Type.back,\n  barCodeTypes: Object.values(BarCodeType)\n};\nvar Constants = BarCodeScanner.Constants,\n    getPermissionsAsync = BarCodeScanner.getPermissionsAsync,\n    requestPermissionsAsync = BarCodeScanner.requestPermissionsAsync;\nexport { Constants, getPermissionsAsync, requestPermissionsAsync };","map":{"version":3,"sources":["../src/BarCodeScanner.tsx"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { PermissionResponse, PermissionStatus } from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\nexport type BarCodePoint = {\n  x: number;\n  y: number;\n};\n\nexport type BarCodeSize = {\n  height: number;\n  width: number;\n};\n\nexport type BarCodeBounds = {\n  origin: BarCodePoint;\n  size: BarCodeSize;\n};\n\nexport type BarCodeScannerResult = {\n  type: string;\n  data: string;\n  bounds?: BarCodeBounds;\n  cornerPoints?: BarCodePoint[];\n};\n\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\nexport { PermissionResponse, PermissionStatus };\n\nexport interface BarCodeScannerProps extends ViewProps {\n  type?: 'front' | 'back' | number;\n  barCodeTypes?: string[];\n  onBarCodeScanned?: BarCodeScannedCallback;\n}\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  onObjectDetected = (callback?: BarCodeScannedCallback) => ({\n    nativeEvent,\n  }: BarCodeEventCallbackArguments) => {\n    const { type } = nativeEvent;\n    if (\n      this.lastEvents[type] &&\n      this.lastEventsTimes[type] &&\n      JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n      Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n    ) {\n      return;\n    }\n\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync } = BarCodeScanner;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}